/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.appsystem.milkteamanage_system.OrderManage;

import com.appsystem.milkteamanage_system.Staff.OrderFrame;
import com.appsystem.milkteamanage_system.Utils.DBConnection;
import com.appsystem.milkteamanage_system.Utils.Utils;
import java.awt.Color;
import java.awt.Component;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Admin
 */
public class OrderManage extends javax.swing.JPanel {

    /**
     * Creates new form OrderManage
     */
    public OrderManage() {
        initComponents();
        OrderManageTable.setRowHeight(30);
        OrderManageTable.setDefaultRenderer(Object.class, new Utils.CustomTableCellRenderer());
        OrderManageTable.setShowGrid(true);
        OrderManageTable.setGridColor(Color.LIGHT_GRAY);
        loadDataFromDatabase();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        OrderManageTable = new javax.swing.JTable();
        btnPrintOrder = new javax.swing.JButton();
        btnExportToPDF = new javax.swing.JButton();

        OrderManageTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "OrderID", "StaffID", "DiscountID", "TotalAmount", "TableNumber", "OrderType", "Status", "IsActive", "OrderDate"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(OrderManageTable);

        btnPrintOrder.setText("In Hoá Đơn");
        btnPrintOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintOrderActionPerformed(evt);
            }
        });

        btnExportToPDF.setText("Xuất PDF");
        btnExportToPDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportToPDFActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 484, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnPrintOrder)
                .addGap(18, 18, 18)
                .addComponent(btnExportToPDF)
                .addGap(60, 60, 60))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(68, 68, 68)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPrintOrder)
                    .addComponent(btnExportToPDF))
                .addContainerGap(89, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnPrintOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintOrderActionPerformed
        // TODO add your handling code here:
        int selectedRow = OrderManageTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một hóa đơn!");
            return;
        }

        int orderId = (int) OrderManageTable.getValueAt(selectedRow, 0); // Cột OrderID
        String status = (String) OrderManageTable.getValueAt(selectedRow, 6); // Cột Status
        if (!"đã thanh toán".equalsIgnoreCase(status)) {
            JOptionPane.showMessageDialog(this, "Chỉ có thể in hóa đơn đã thanh toán!");
            return;
        }

        // Lấy thông tin khuyến mãi
        double discountAmount = 0;
        String discountCodeName = "Không có";
        int discountId = (int) OrderManageTable.getValueAt(selectedRow, 2); // Cột DiscountID
        double totalAmount = (double) OrderManageTable.getValueAt(selectedRow, 3); // Cột TotalAmount
        if (discountId != 0) {
            try (Connection conn = DBConnection.getConnection()) {
                String discountSql = "SELECT Name AS CodeName, DiscountPercent FROM Discounts WHERE DiscountID = ?";
                PreparedStatement pst = conn.prepareStatement(discountSql);
                pst.setInt(1, discountId);
                ResultSet rs = pst.executeQuery();
                if (rs.next()) {
                    discountCodeName = rs.getString("CodeName");
                    double discountPercent = rs.getDouble("DiscountPercent");
                    discountAmount = totalAmount * (discountPercent / 100.0); // Tính discountAmount dựa trên phần trăm
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Lỗi lấy thông tin khuyến mãi: " + e.getMessage());
            }
        }

        Utils.displayBillPanel(orderId, discountAmount, discountCodeName, this);
    }//GEN-LAST:event_btnPrintOrderActionPerformed

    private void btnExportToPDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportToPDFActionPerformed
        // TODO add your handling code here:
        int selectedRow = OrderManageTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một hóa đơn!");
            return;
        }

        int orderId = (int) OrderManageTable.getValueAt(selectedRow, 0); // Cột OrderID
        String status = (String) OrderManageTable.getValueAt(selectedRow, 6); // Cột Status
        if (!"đã thanh toán".equalsIgnoreCase(status)) {
            JOptionPane.showMessageDialog(this, "Chỉ có thể xuất PDF cho hóa đơn đã thanh toán!");
            return;
        }

        // Lấy thông tin khuyến mãi
        double discountAmount = 0;
        String discountCodeName = "Không có";
        int discountId = (int) OrderManageTable.getValueAt(selectedRow, 2); // Cột DiscountID
        double totalAmount = (double) OrderManageTable.getValueAt(selectedRow, 3); // Cột TotalAmount
        if (discountId != 0) {
            try (Connection conn = DBConnection.getConnection()) {
                String discountSql = "SELECT Name AS CodeName, DiscountPercent FROM Discounts WHERE DiscountID = ?";
                PreparedStatement pst = conn.prepareStatement(discountSql);
                pst.setInt(1, discountId);
                ResultSet rs = pst.executeQuery();
                if (rs.next()) {
                    discountCodeName = rs.getString("CodeName");
                    double discountPercent = rs.getDouble("DiscountPercent");
                    discountAmount = totalAmount * (discountPercent / 100.0); // Tính discountAmount dựa trên phần trăm
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Lỗi lấy thông tin khuyến mãi: " + e.getMessage());
            }
        }

        Utils.promptAndExportBillToPDF(orderId, this);
    }//GEN-LAST:event_btnExportToPDFActionPerformed

    private void loadDataFromDatabase() {
        String sql = "SELECT OrderID, StaffID, DiscountID, TotalAmount, TableNumber, OrderType, Status,IsActive,OrderDate FROM Orders";
        try (Connection conn = DBConnection.getConnection(); PreparedStatement pst = conn.prepareStatement(sql); ResultSet rs = pst.executeQuery()) {

            DefaultTableModel model = (DefaultTableModel) OrderManageTable.getModel();
            model.setRowCount(0);
            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getInt("OrderID"),
                    rs.getInt("StaffID"),
                    rs.getInt("DiscountID"),
                    rs.getDouble("TotalAmount"),
                    rs.getInt("tableNumber"),
                    rs.getString("OrderType"),
                    rs.getString("Status"),
                    rs.getInt("IsActive"),
                    rs.getTimestamp("OrderDate"),});
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Lỗi tải dữ liệu: " + e.getMessage());
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JTable OrderManageTable;
    private javax.swing.JButton btnExportToPDF;
    private javax.swing.JButton btnPrintOrder;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
